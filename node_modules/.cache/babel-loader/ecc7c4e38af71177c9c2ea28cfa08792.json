{"remainingRequest":"C:\\Users\\Nathan\\Desktop\\github-repository\\icontinu-app-front\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Nathan\\Desktop\\github-repository\\icontinu-app-front\\node_modules\\vuetify-loader\\lib\\loader.js!C:\\Users\\Nathan\\Desktop\\github-repository\\icontinu-app-front\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Nathan\\Desktop\\github-repository\\icontinu-app-front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Nathan\\Desktop\\github-repository\\icontinu-app-front\\src\\views\\MyCourseView.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Nathan\\Desktop\\github-repository\\icontinu-app-front\\src\\views\\MyCourseView.vue","mtime":1571114470752},{"path":"C:\\Users\\Nathan\\Desktop\\github-repository\\icontinu-app-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Nathan\\Desktop\\github-repository\\icontinu-app-front\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Nathan\\Desktop\\github-repository\\icontinu-app-front\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1564062719000},{"path":"C:\\Users\\Nathan\\Desktop\\github-repository\\icontinu-app-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Nathan\\Desktop\\github-repository\\icontinu-app-front\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"C:\\\\Users\\\\Nathan\\\\Desktop\\\\github-repository\\\\icontinu-app-front\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport QRCode from \"qrcodejs2\";\nexport default {\n  name: \"qrcoding\",\n  data: function data() {\n    return {\n      course_id: \"\",\n      isScanned: false,\n      id: \"\",\n      dialog: {\n        showing: true,\n        title: \"\",\n        text: \"Please show this code to the organisor.\"\n      }\n    };\n  },\n  computed: {},\n  mounted: function mounted() {\n    this.course_id = this.$route.params.id;\n    this.qrcode();\n    this.acvtiveQRCode();\n    this.timer = setInterval(this.queryStatus, 5000);\n  },\n  beforeRouteLeave: function beforeRouteLeave(to, from, next) {\n    clearInterval(this.timer);\n    next();\n  },\n  methods: {\n    qrcode: function qrcode() {\n      var qr = document.getElementById(\"qrcode\");\n      this.id = this.course_id + new Date().getMilliseconds();\n      console.log(this.id);\n      var qrcode = new QRCode(qr, {\n        width: 250,\n        height: 250,\n        text: \"{\\\"course\\\":\\\"\".concat(this.course_id, \"\\\",\\n        \\\"username\\\":\\\"\").concat(window.localStorage.getItem(\"username\"), \"\\\",\\n          \\\"id\\\": \\\"\").concat(this.id, \"\\\"}\"),\n        background: \"#f0f\",\n        foreground: \"#ff0\"\n      });\n      console.log(qrcode);\n    },\n    goRec: function goRec() {\n      this.$router.push({\n        name: \"face scan\",\n        params: {\n          id: this.course_id\n        }\n      });\n    },\n    queryStatus: function () {\n      var _queryStatus = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var data, res, send_data, _res;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                data = new FormData();\n                data.append(\"id\", this.id);\n                _context.next = 4;\n                return this.$store.dispatch(\"callAPI\", {\n                  send: data,\n                  branch: \"/check_qr/\",\n                  call: \"DO_NOTHING\",\n                  setData: {}\n                });\n\n              case 4:\n                res = _context.sent;\n\n                if (!(res.code == \"scanned\")) {\n                  _context.next = 12;\n                  break;\n                }\n\n                send_data = new FormData(); // send_data.append(\"username\", window.localStorage.getItem(\"username\"));\n\n                send_data.append(\"course_id\", this.course_id);\n                _context.next = 10;\n                return this.$store.dispatch(\"callAPI\", {\n                  send: send_data,\n                  branch: \"/user_pass_qr/\",\n                  call: \"DO_NOTHING\",\n                  setData: {}\n                });\n\n              case 10:\n                _res = _context.sent;\n\n                if (_res.code == \"1\") {\n                  this.$store.commit(\"SET_SNACKBAR\", {\n                    showing: true,\n                    text: \"Successfully verified QR code\",\n                    color: \"success\"\n                  });\n                  this.goRec();\n                } else {\n                  this.$store.commit(\"SET_SNACKBAR\", {\n                    showing: true,\n                    text: _res.message,\n                    color: \"error\"\n                  });\n                }\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function queryStatus() {\n        return _queryStatus.apply(this, arguments);\n      }\n\n      return queryStatus;\n    }(),\n    acvtiveQRCode: function () {\n      var _acvtiveQRCode = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.$store.dispatch(\"callAPI\", {\n                  send: {},\n                  branch: \"/active_qr/\",\n                  call: \"DO_NOTHING\",\n                  setData: {}\n                });\n\n              case 2:\n                res = _context2.sent;\n\n                if (res.code == \"true\") {\n                  console.log(res.message);\n                }\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function acvtiveQRCode() {\n        return _acvtiveQRCode.apply(this, arguments);\n      }\n\n      return acvtiveQRCode;\n    }()\n  },\n  created: function created() {},\n  beforeDestroy: function beforeDestroy() {\n    clearInterval(this.timer);\n  }\n};",{"version":3,"sources":["MyCourseView.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <v-container>\r\n    <v-row>\r\n      <v-col cols=\"12\" md=\"3\"></v-col>\r\n      <v-col cols=\"12\" md=\"6\">\r\n        <div id=\"qrCodingBox\">\r\n          <h1>Course QR Code</h1>\r\n          <v-card outlined id=\"qr-card\">\r\n            <v-col>\r\n              <v-row>\r\n                <v-col>\r\n                  <div id=\"qrcode\" ref=\"qrcode\"></div>\r\n                </v-col>\r\n              </v-row>\r\n              <v-row>\r\n                <v-col>\r\n                  <div>\r\n                    <v-chip id=\"hint\">SCAN YOUR CODE</v-chip>\r\n                  </div>\r\n                </v-col>\r\n              </v-row>\r\n            </v-col>\r\n          </v-card>\r\n          <!--  -->\r\n          <v-dialog v-model=\"dialog.showing\" width=\"300\">\r\n            <v-card color=\"rgba(255,255,255,0.90)\" style=\"padding:20px\">\r\n              <v-card-text>\r\n                <h2>{{dialog.text}}</h2>\r\n              </v-card-text>\r\n              <v-btn color=\"orange\" large dark @click=\"dialog.showing = false\">OK</v-btn>\r\n              <div class=\"flex-grow-1\" justify=\"center\"></div>\r\n            </v-card>\r\n          </v-dialog>\r\n          <!--  -->\r\n          <!-- <el-button type=\"primary\" @click=\"goRec\">Facial Recognition</el-button> -->\r\n        </div>\r\n      </v-col>\r\n      <v-col cols=\"12\" md=\"3\"></v-col>\r\n    </v-row>\r\n  </v-container>\r\n</template>\r\n\r\n<script>\r\nimport QRCode from \"qrcodejs2\";\r\nexport default {\r\n  name: \"qrcoding\",\r\n  data() {\r\n    return {\r\n      course_id: \"\",\r\n      isScanned: false,\r\n      id: \"\",\r\n      dialog: {\r\n        showing: true,\r\n        title: \"\",\r\n        text: \"Please show this code to the organisor.\"\r\n      }\r\n    };\r\n  },\r\n  computed: {},\r\n  mounted() {\r\n    this.course_id = this.$route.params.id;\r\n    this.qrcode();\r\n    this.acvtiveQRCode();\r\n    this.timer = setInterval(this.queryStatus, 5000);\r\n  },\r\n  beforeRouteLeave(to, from, next) {\r\n    clearInterval(this.timer);\r\n    next();\r\n  },\r\n  methods: {\r\n    qrcode() {\r\n      let qr = document.getElementById(\"qrcode\");\r\n      this.id = this.course_id + new Date().getMilliseconds();\r\n      console.log(this.id);\r\n      let qrcode = new QRCode(qr, {\r\n        width: 250,\r\n        height: 250,\r\n        text: `{\"course\":\"${this.course_id}\",\r\n        \"username\":\"${window.localStorage.getItem(\"username\")}\",\r\n          \"id\": \"${this.id}\"}`,\r\n        background: \"#f0f\",\r\n        foreground: \"#ff0\"\r\n      });\r\n      console.log(qrcode);\r\n    },\r\n    goRec() {\r\n      this.$router.push({\r\n        name: \"face scan\",\r\n        params: { id: this.course_id }\r\n      });\r\n    },\r\n    async queryStatus() {\r\n      let data = new FormData();\r\n      data.append(\"id\", this.id);\r\n\r\n      let res = await this.$store.dispatch(\"callAPI\", {\r\n        send: data,\r\n        branch: \"/check_qr/\",\r\n        call: \"DO_NOTHING\",\r\n        setData: {}\r\n      });\r\n      if (res.code == \"scanned\") {\r\n        let send_data = new FormData();\r\n        // send_data.append(\"username\", window.localStorage.getItem(\"username\"));\r\n        send_data.append(\"course_id\", this.course_id);\r\n        let res = await this.$store.dispatch(\"callAPI\", {\r\n          send: send_data,\r\n          branch: \"/user_pass_qr/\",\r\n          call: \"DO_NOTHING\",\r\n          setData: {}\r\n        });\r\n        if (res.code == \"1\") {\r\n          this.$store.commit(\"SET_SNACKBAR\", {\r\n            showing: true,\r\n            text: \"Successfully verified QR code\",\r\n            color: \"success\"\r\n          });\r\n          this.goRec();\r\n        } else {\r\n          this.$store.commit(\"SET_SNACKBAR\", {\r\n            showing: true,\r\n            text: res.message,\r\n            color: \"error\"\r\n          });\r\n        }\r\n      }\r\n    },\r\n    async acvtiveQRCode() {\r\n      // let data = new FormData();\r\n      let res = await this.$store.dispatch(\"callAPI\", {\r\n        send: {},\r\n        branch: \"/active_qr/\",\r\n        call: \"DO_NOTHING\",\r\n        setData: {}\r\n      });\r\n      if (res.code == \"true\") {\r\n        console.log(res.message);\r\n      }\r\n    }\r\n  },\r\n  created() {},\r\n  beforeDestroy() {\r\n    clearInterval(this.timer);\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n#qrCodingBox {\r\n  text-align: center;\r\n}\r\n#qrcode {\r\n  padding-left: calc(50% - 125px);\r\n  padding-top: 50px;\r\n}\r\n#qr-card {\r\n  padding: 0 0 50px 0;\r\n  border-radius: 50px;\r\n  border-color: #e3d0ff;\r\n}\r\n#hint {\r\n  background-color: rgb(238, 175, 97);\r\n  color: #5c6ac4;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/views"}]}