{"remainingRequest":"C:\\Users\\Nathan\\Desktop\\github-repository\\icontinu-app-front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Nathan\\Desktop\\github-repository\\icontinu-app-front\\src\\views\\ManageScan.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Nathan\\Desktop\\github-repository\\icontinu-app-front\\src\\views\\ManageScan.vue","mtime":1571070863723},{"path":"C:\\Users\\Nathan\\Desktop\\github-repository\\icontinu-app-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Nathan\\Desktop\\github-repository\\icontinu-app-front\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Nathan\\Desktop\\github-repository\\icontinu-app-front\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Nathan\\Desktop\\github-repository\\icontinu-app-front\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1564062719000},{"path":"C:\\Users\\Nathan\\Desktop\\github-repository\\icontinu-app-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Nathan\\Desktop\\github-repository\\icontinu-app-front\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { QrcodeStream } from \"vue-qrcode-reader\";\r\nexport default {\r\n  components: {\r\n    QrcodeStream\r\n  },\r\n  data() {\r\n    return {\r\n      overlay: false\r\n    };\r\n  },\r\n  methods: {\r\n    open(title, color) {\r\n      this.$store.commit(\"SET_SNACKBAR\", {\r\n        showing: true,\r\n        text: title,\r\n        color: color\r\n      });\r\n    },\r\n    refresh() {\r\n      location.reload();\r\n    },\r\n    async verifyQR(obj) {\r\n      let send = new FormData();\r\n      send.append(\"username\", obj.username);\r\n      send.append(\"course_id\", obj.course);\r\n      console.log(send.get('username'))\r\n      console.log(send.get('course_id'))\r\n      let res = await this.$store.dispatch(\"callAPI\", {\r\n        send: send,\r\n        branch: \"/verify_user_enrollment/\",\r\n        call: \"DO_NOTHING\",\r\n        setData: {}\r\n      });\r\n      if (res.code == \"1\") {\r\n        this.open(res.message, \"success\");\r\n        this.callFacePage(obj);\r\n      } else {\r\n        this.open(res.message, \"error\");\r\n      }\r\n    },\r\n    async callFacePage(obj) {\r\n      let send = new FormData();\r\n      send.append(\"id\", obj.id);\r\n      this.overlay = true;\r\n\r\n      let res = await this.$store.dispatch(\"callAPI\", {\r\n        send: send,\r\n        branch: \"/scan_qr/\",\r\n        call: \"DO_NOTHING\",\r\n        setData: {}\r\n      });\r\n      this.overlay = false;\r\n      if (res.code == \"scanning\") {\r\n        this.open(\r\n          res.message + \" [code:\" + res.code + \"]\",\r\n          \"success\"\r\n        );\r\n        window.setTimeout(this.tellParrent, 1000 * 3);\r\n        // this.tellParrent();\r\n      } else {\r\n        this.open(res.message + \" [code:\" + res.code + \"]\", \"error\");\r\n      }\r\n    },\r\n    async onDecode(str) {\r\n      if (str.length == 0) {\r\n        this.refresh();\r\n      }\r\n      console.log(str);\r\n\r\n      let obj;\r\n      try {\r\n        obj = JSON.parse(str);\r\n        if (obj.id == undefined) {\r\n          this.open(\"Please show valid QR code\", \"error\");\r\n          return;\r\n        }\r\n        console.log(obj.id);\r\n      } catch {\r\n        this.open(\"Please show valid QR code\", \"error\");\r\n        return;\r\n      }\r\n\r\n      this.verifyQR(obj);\r\n    },\r\n    goFaceScan() {\r\n      this.$stores.dispatch(\"isQR_Verfied\");\r\n    },\r\n    async onInit(promise) {\r\n      try {\r\n        await promise;\r\n      } catch (error) {\r\n        if (error.name === \"NotAllowedError\") {\r\n          this.error = \"ERROR: you need to grant camera access permisson\";\r\n        } else if (error.name === \"NotFoundError\") {\r\n          this.error = \"ERROR: no camera on this device\";\r\n        } else if (error.name === \"NotSupportedError\") {\r\n          this.error = \"ERROR: secure context required (HTTPS, localhost)\";\r\n        } else if (error.name === \"NotReadableError\") {\r\n          this.error = \"ERROR: is the camera already in use?\";\r\n        } else if (error.name === \"OverconstrainedError\") {\r\n          this.error = \"ERROR: installed cameras are not suitable\";\r\n        } else if (error.name === \"StreamApiNotSupportedError\") {\r\n          this.error = \"ERROR: Stream API is not supported in this browser\";\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["ManageScan.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"ManageScan.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n<v-row>\r\n  <v-col cols=\"12\" md=\"2\"> </v-col>\r\n  <v-col cols=\"12\" md=\"8\">\r\n<v-overlay v-model=\"overlay\" z-index=\"10000\">Verifying, please wait...</v-overlay>\r\n    <div>\r\n      <h1>QR CODE SCAN</h1>\r\n    </div>\r\n    <v-card outlined class=\"pa-2\">\r\n      <div class=\"ma-1\">\r\n        <qrcode-stream @decode=\"onDecode\" @init=\"onInit\" />\r\n      </div>\r\n      <div class=\"ma-1\">\r\n        <v-btn id=\"submitbtn\" color=\"rgb(231,113,51)\" dark @click=\"refresh\">Refresh</v-btn>\r\n      </div>\r\n    </v-card>\r\n    <div class=\"text-center\">\r\n      <canvas id=\"canvas\" width=\"640\" height=\"480\" style=\"display: none;\"></canvas>\r\n    </div>\r\n  </v-col>\r\n  <v-col cols=\"12\" md=\"2\">  </v-col>\r\n</v-row>\r\n</template>\r\n\r\n<script>\r\nimport { QrcodeStream } from \"vue-qrcode-reader\";\r\nexport default {\r\n  components: {\r\n    QrcodeStream\r\n  },\r\n  data() {\r\n    return {\r\n      overlay: false\r\n    };\r\n  },\r\n  methods: {\r\n    open(title, color) {\r\n      this.$store.commit(\"SET_SNACKBAR\", {\r\n        showing: true,\r\n        text: title,\r\n        color: color\r\n      });\r\n    },\r\n    refresh() {\r\n      location.reload();\r\n    },\r\n    async verifyQR(obj) {\r\n      let send = new FormData();\r\n      send.append(\"username\", obj.username);\r\n      send.append(\"course_id\", obj.course);\r\n      console.log(send.get('username'))\r\n      console.log(send.get('course_id'))\r\n      let res = await this.$store.dispatch(\"callAPI\", {\r\n        send: send,\r\n        branch: \"/verify_user_enrollment/\",\r\n        call: \"DO_NOTHING\",\r\n        setData: {}\r\n      });\r\n      if (res.code == \"1\") {\r\n        this.open(res.message, \"success\");\r\n        this.callFacePage(obj);\r\n      } else {\r\n        this.open(res.message, \"error\");\r\n      }\r\n    },\r\n    async callFacePage(obj) {\r\n      let send = new FormData();\r\n      send.append(\"id\", obj.id);\r\n      this.overlay = true;\r\n\r\n      let res = await this.$store.dispatch(\"callAPI\", {\r\n        send: send,\r\n        branch: \"/scan_qr/\",\r\n        call: \"DO_NOTHING\",\r\n        setData: {}\r\n      });\r\n      this.overlay = false;\r\n      if (res.code == \"scanning\") {\r\n        this.open(\r\n          res.message + \" [code:\" + res.code + \"]\",\r\n          \"success\"\r\n        );\r\n        window.setTimeout(this.tellParrent, 1000 * 3);\r\n        // this.tellParrent();\r\n      } else {\r\n        this.open(res.message + \" [code:\" + res.code + \"]\", \"error\");\r\n      }\r\n    },\r\n    async onDecode(str) {\r\n      if (str.length == 0) {\r\n        this.refresh();\r\n      }\r\n      console.log(str);\r\n\r\n      let obj;\r\n      try {\r\n        obj = JSON.parse(str);\r\n        if (obj.id == undefined) {\r\n          this.open(\"Please show valid QR code\", \"error\");\r\n          return;\r\n        }\r\n        console.log(obj.id);\r\n      } catch {\r\n        this.open(\"Please show valid QR code\", \"error\");\r\n        return;\r\n      }\r\n\r\n      this.verifyQR(obj);\r\n    },\r\n    goFaceScan() {\r\n      this.$stores.dispatch(\"isQR_Verfied\");\r\n    },\r\n    async onInit(promise) {\r\n      try {\r\n        await promise;\r\n      } catch (error) {\r\n        if (error.name === \"NotAllowedError\") {\r\n          this.error = \"ERROR: you need to grant camera access permisson\";\r\n        } else if (error.name === \"NotFoundError\") {\r\n          this.error = \"ERROR: no camera on this device\";\r\n        } else if (error.name === \"NotSupportedError\") {\r\n          this.error = \"ERROR: secure context required (HTTPS, localhost)\";\r\n        } else if (error.name === \"NotReadableError\") {\r\n          this.error = \"ERROR: is the camera already in use?\";\r\n        } else if (error.name === \"OverconstrainedError\") {\r\n          this.error = \"ERROR: installed cameras are not suitable\";\r\n        } else if (error.name === \"StreamApiNotSupportedError\") {\r\n          this.error = \"ERROR: Stream API is not supported in this browser\";\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>"]}]}